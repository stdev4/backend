name: Build, Push to ECR and Deploy to EC2
on:
  push:
    branches:
      - test/test-ecr

  # ÏàòÎèô Ïã§Ìñâ ÏòµÏÖò
  workflow_dispatch:

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create application.properties
        run: |
          echo "Creating application.properties file with RDS configuration..."
          mkdir -p src/main/resources
          cat > src/main/resources/application.properties << EOL
          # AWS RDS MySQL Ïó∞Í≤∞ ÏÑ§Ï†ï
          spring.datasource.url=jdbc:mysql://${{ secrets.DB_HOST }}:3306/${{ secrets.DB_NAME }}?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8
          spring.datasource.username=${{ secrets.DB_USERNAME }}
          spring.datasource.password=${{ secrets.DB_PASSWORD }}
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          
          # JPA/Hibernate ÏÑ§Ï†ï
          spring.jpa.hibernate.ddl-auto=update
          spring.jpa.show-sql=true
          spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
          spring.jpa.properties.hibernate.format_sql=true
          EOL
          echo "‚úÖ application.properties file created successfully!"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          echo "Verifying AWS credentials..."
          if aws sts get-caller-identity &> /dev/null; then
            echo "‚úÖ AWS credentials verified successfully!"
          else
            echo "‚ùå AWS credentials verification failed!"
            exit 1
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Verify ECR login
        run: |
          if [ -n "${{ steps.login-ecr.outputs.registry }}" ]; then
            echo "‚úÖ ECR login successful!"
            echo "Registry: ${{ steps.login-ecr.outputs.registry }}"
          else
            echo "‚ùå ECR login failed!"
            exit 1
          fi

      - name: Verify ECR repository
        run: |
          echo "Verifying ECR repository: ${{ secrets.ECR_REPOSITORY }}"
          if aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY }} &> /dev/null; then
            echo "‚úÖ ECR repository exists!"
          else
            echo "‚ùå ECR repository does not exist!"
            echo "Creating repository: ${{ secrets.ECR_REPOSITORY }}"
            aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY }}
            echo "‚úÖ ECR repository created successfully!"
          fi

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Using ECR Registry: $ECR_REGISTRY"
          echo "Using repository: $ECR_REPOSITORY"
          echo "Using image tag: $IMAGE_TAG"
          
          # ÎèÑÏª§ Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # ECRÏóê Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "‚úÖ Image successfully pushed to ECR!"
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Print image details
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "‚úÖ ECR Push completed successfully!"
          echo "Image URL: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Latest Image URL: $ECR_REGISTRY/$ECR_REPOSITORY:latest"

      # EC2 Î∞∞Ìè¨ Îã®Í≥Ñ ÏãúÏûë
      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "üöÄ Starting deployment to EC2 instance..."
          
          # Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉùÏÑ±
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          
          # ÌôòÍ≤Ω Î≥ÄÏàò ÏÑ§Ï†ï
          ECR_REGISTRY="${1}"
          ECR_REPOSITORY="${2}"
          IMAGE_TAG="${3}"
          DB_HOST="${4}"
          DB_NAME="${5}"
          DB_USERNAME="${6}"
          DB_PASSWORD="${7}"
          
          # AWS CLI ÏÑ§Ïπò ÌôïÏù∏ Î∞è ÏÑ§Ïπò
          if ! command -v aws &> /dev/null; then
              echo "üîÑ AWS CLI not found. Installing..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt-get update
              sudo apt-get install -y unzip
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
              echo "‚úÖ AWS CLI installed successfully!"
          else
              echo "‚úÖ AWS CLI already installed."
          fi
          
          echo "üîÑ Logging in to ECR..."
          aws ecr get-login-password --region $(aws configure get region) | docker login --username AWS --password-stdin ${ECR_REGISTRY}
          
          echo "üîÑ Pulling the latest image..."
          docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          
          echo "üîÑ Stopping and removing existing container if exists..."
          docker stop spring-app 2>/dev/null || true
          docker rm spring-app 2>/dev/null || true
          
          echo "üîÑ Starting new container..."
          docker run -d \
            --name spring-app \
            -p 8080:8080 \
            --restart always \
            -e SPRING_DATASOURCE_URL="jdbc:mysql://${DB_HOST}:3306/${DB_NAME}?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8" \
            -e SPRING_DATASOURCE_USERNAME="${DB_USERNAME}" \
            -e SPRING_DATASOURCE_PASSWORD="${DB_PASSWORD}" \
            ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          
          echo "‚úÖ Deployment completed successfully!"
          
          # Ïã§Ìñâ Ï§ëÏù∏ Ïª®ÌÖåÏù¥ÎÑà Î™©Î°ù Ï∂úÎ†•
          echo "üîç Running containers:"
          docker ps
          EOL
          
          # Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏Ïóê Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨
          chmod +x deploy.sh
          
          # SSH key ÌååÏùº ÏÉùÏÑ±
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem
          
          # Ïä§ÌÅ¨Î¶ΩÌä∏Î•º EC2 Ïù∏Ïä§ÌÑ¥Ïä§Î°ú Î≥µÏÇ¨ ÌõÑ Ïã§Ìñâ
          scp -i ec2-key.pem -o StrictHostKeyChecking=no deploy.sh ${EC2_USERNAME}@${EC2_HOST}:/tmp/deploy.sh
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no ${EC2_USERNAME}@${EC2_HOST} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh ${ECR_REGISTRY} ${ECR_REPOSITORY} ${IMAGE_TAG} ${DB_HOST} ${DB_NAME} ${DB_USERNAME} ${DB_PASSWORD}"
          
          # ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨
          rm -f ec2-key.pem deploy.sh
          
          echo "‚úÖ EC2 deployment completed successfully!"

      - name: Deployment Status Notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Entire workflow completed successfully!"
          else
            echo "‚ùå Workflow failed at some point. Check logs for details."
          fi